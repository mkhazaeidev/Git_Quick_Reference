Getting a Git Repository
    1- Initializing a Repository in an Existing Directory:
        git init

    2- Cloning an Existing Repository:
        git clone <url>

        --example: git clone https://github.com/mkhazaeidev/Git_Quick_Reference.git

Checking the Status of Your Files:
    1- Comprehensive status:
        git status

    2- Short Status:
        git status -s
        git status --short

        --help:
            ??: Unmodified
            A: Added
            C: Copied
            D: Deleted
            M: Modified
            U: Updated but unmerged
            R: Renamed

            left-hand column: indicates the status of the staging area
            right-hand column: indicates the status of the working directory

            --example:
                 M: The file is modified in the working directory but not yet staged.
                M : The file is modified and staged.
                MM: The file was modified, staged and then modified again, so there are changes to it that are both staged and unstaged.

Tracking New Files
    git add <files>

Tracking All Files
    git add .
    git add -A

Restore files (from Working Directory)
    git restore <file>

Restore files (from Staging Area)
    git restore --staged <file>

Viewing Your Staged and Unstaged Changes
    1- To see what you've changed in working directory:
        git diff

    2- To see what you've changed in staged area:
        git diff --staged

    3- To see what youâ€™ve staged so far:
        git diff --cached

Committing Your Changes
    git commit -m "message"

Skipping the Staging Area
    git commit -a -m "message"

Removing Files
    1- Remove the file from working directory:
        git rm -f <files>

    2- Remove the file from stage area:
        git rm <files>

    3- To keep the file in your working tree but remove it from your staging area:
        git rm --cached <files>

Rename Files
    a- git mv file_from file_to

    b- git rm file_from
       git add file_to

Viewing the Commit History
    1- To look back to see what has happened (see all commit)
        git log

    2- to show the difference introduced in each commit:
        git log -p
        git log --patch

    3- to see some abbreviated stats for each commit:
        git log --stat

    4- Prints each commit on a single line:
        a- git log --pretty=oneline

           --help: In addition, the short, full, and fuller values show the output in roughly the same format but with less or more information, respectively

        b- git log --oneline

    5- Showing your branch and merge history ASCII graph:
        git log --graph
    
Limiting Log Output
    1- Displays only the last -<n> entries:
        git log -<n>

    2- The list of commits made in the last <n> weeks:
        git log --since=<n>.weeks
        --help: you can use minutes, hours, days, weeks, years
    
    3- To filter on a specific author:
        git log --author="author name"

    4- Search for keywords in the commit messages:
        git log --grep=<keywords>

    5- Show the commit that changed the <text>:
        git log -S <text>

    6- To filter log specify a directory or file name:
        git log -- path/to/file


Undoing Things